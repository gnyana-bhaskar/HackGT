{"version":3,"sources":["components/InventoryView.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["InventoryView","data","React","useMemo","fromUnit","toUnit","factor","columns","Header","accessor","isNumeric","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","span","pl","isSorted","isSortedDesc","TriangleDown","aria-label","TriangleUp","row","getRowProps","cells","cell","getCellProps","NavBar","to","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","breakpoints","sm","md","lg","xl","newTheme","theme","Index","rootElement","document","getElementById","ReactDOM"],"mappings":"mRAiGiBA,MA5FjB,WACI,IAAMC,EAAOC,IAAMC,SACjB,iBAAM,CACJ,CACEC,SAAU,SACVC,OAAQ,mBACRC,OAAQ,MAEV,CACEF,SAAU,OACVC,OAAQ,mBACRC,OAAQ,OAEV,CACEF,SAAU,QACVC,OAAQ,aACRC,OAAQ,WAGZ,IAGIC,EAAUL,IAAMC,SACpB,iBAAM,CACJ,CACEK,OAAQ,aACRC,SAAU,YAEZ,CACED,OAAQ,OACRC,SAAU,UAEZ,CACED,OAAQ,cACRC,SAAU,SACVC,WAAW,MAGf,IAtCmB,EA+CjBC,mBAAS,CAAEJ,UAASN,QAAQW,aAL9BC,EA1CmB,EA0CnBA,cACAC,EA3CmB,EA2CnBA,kBACAC,EA5CmB,EA4CnBA,aACAC,EA7CmB,EA6CnBA,KACAC,EA9CmB,EA8CnBA,WAGF,OACE,eAAC,IAAD,2BAAWJ,KAAX,cACE,cAAC,IAAD,UACGE,EAAaG,KAAI,SAACC,GAAD,OAChB,cAAC,IAAD,2BAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,eAAC,IAAD,2BACMA,EAAOC,eAAeD,EAAOE,yBADnC,IAEEd,UAAWY,EAAOZ,UAFpB,UAIGY,EAAOG,OAAO,UACf,cAAC,IAAOC,KAAR,CAAaC,GAAG,IAAhB,SACGL,EAAOM,SACNN,EAAOO,aACL,cAACC,EAAA,EAAD,CAAkBC,aAAW,sBAE7B,cAACC,EAAA,EAAD,CAAgBD,aAAW,qBAE3B,sBAOhB,cAAC,IAAD,2BAAWjB,KAAX,aACGE,EAAKE,KAAI,SAACe,GAET,OADAhB,EAAWgB,GAET,cAAC,IAAD,2BAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMjB,KAAI,SAACkB,GAAD,OACb,cAAC,IAAD,2BAAQA,EAAKC,gBAAb,IAA6B3B,UAAW0B,EAAKd,OAAOZ,UAApD,SACG0B,EAAKX,OAAO,4BClElBa,EAlBD,WACZ,OACA,gCACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,UAAT,sBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,yBCSSC,MAnBf,WACE,OACE,8BACG,cAAC,IAAD,UACK,eAAC,IAAD,WACJ,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,gBAApB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAO,iBAApB,SACE,cAAC,EAAD,cCFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,0BCARQ,EAAc,CAAC,QAAS,QAAS,SAAU,UACjDA,EAAYC,GAAKD,EAAY,GAC7BA,EAAYE,GAAKF,EAAY,GAC7BA,EAAYG,GAAKH,EAAY,GAC7BA,EAAYI,GAAKJ,EAAY,GAE7B,IAAMK,EAAQ,2BACTC,SADS,IAEZN,gBAIF,SAASO,IACP,OACE,eAAC,IAAD,CAAgBD,MAASD,EAAzB,UACE,cAAC,IAAD,IACA,cAAC,EAAD,OAKN,IAAMG,EAAcC,SAASC,eAAe,QAC5CC,IAAStC,OAAO,cAACkC,EAAD,IAAUC,GAO1BjB,M","file":"static/js/main.9be8f2f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\"\r\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\"\r\nimport { useTable, useSortBy } from \"react-table\"\r\n\r\nfunction InventoryView() {\r\n    const data = React.useMemo(\r\n      () => [\r\n        {\r\n          fromUnit: \"inches\",\r\n          toUnit: \"millimetres (mm)\",\r\n          factor: 25.4,\r\n        },\r\n        {\r\n          fromUnit: \"feet\",\r\n          toUnit: \"centimetres (cm)\",\r\n          factor: 30.48,\r\n        },\r\n        {\r\n          fromUnit: \"yards\",\r\n          toUnit: \"metres (m)\",\r\n          factor: 0.91444,\r\n        },\r\n      ],\r\n      [],\r\n    )\r\n  \r\n    const columns = React.useMemo(\r\n      () => [\r\n        {\r\n          Header: \"To convert\",\r\n          accessor: \"fromUnit\",\r\n        },\r\n        {\r\n          Header: \"Into\",\r\n          accessor: \"toUnit\",\r\n        },\r\n        {\r\n          Header: \"Multiply by\",\r\n          accessor: \"factor\",\r\n          isNumeric: true,\r\n        },\r\n      ],\r\n      [],\r\n    )\r\n  \r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n    } = useTable({ columns, data }, useSortBy)\r\n  \r\n    return (\r\n      <Table {...getTableProps()}>\r\n        <Thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <Tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <Th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  isNumeric={column.isNumeric}\r\n                >\r\n                  {column.render(\"Header\")}\r\n                  <chakra.span pl=\"4\">\r\n                    {column.isSorted ? (\r\n                      column.isSortedDesc ? (\r\n                        <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                      ) : (\r\n                        <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                      )\r\n                    ) : null}\r\n                  </chakra.span>\r\n                </Th>\r\n              ))}\r\n            </Tr>\r\n          ))}\r\n        </Thead>\r\n        <Tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row)\r\n            return (\r\n              <Tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => (\r\n                  <Td {...cell.getCellProps()} isNumeric={cell.column.isNumeric}>\r\n                    {cell.render(\"Cell\")}\r\n                  </Td>\r\n                ))}\r\n              </Tr>\r\n            )\r\n          })}\r\n        </Tbody>\r\n      </Table>\r\n    )\r\n  }\r\n\r\n  export default InventoryView\r\n\r\n","import React from 'react';\r\nimport {  Link } from \"react-router-dom\";\r\nconst NavBar= () =>{\r\n  return (\r\n  <div>\r\n    <li>\r\n      <Link to=\"/\">Dogs</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/cats\">Cats</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/sheeps\">Sheeps</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/goats\">Goats</Link>\r\n    </li>\r\n  </div>\r\n  );\r\n}\r\nexport default NavBar;\r\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport InventoryView from './components/InventoryView';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div>\n       <Router>\n            <Switch>\n        <Route exact path = \"/invetoryview\">\n          <NavBar/>\n          </Route>\n        <Route exact path = \"/inventoryview\">\n          <InventoryView/>\n          </Route>\n      </Switch>\n    </Router>\n    </div>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {theme, CSSReset, ChakraProvider} from \"@chakra-ui/react\";\n\nconst breakpoints = [\"360px\", \"768px\", \"1024px\", \"1440px\"];\nbreakpoints.sm = breakpoints[0];\nbreakpoints.md = breakpoints[1];\nbreakpoints.lg = breakpoints[2];\nbreakpoints.xl = breakpoints[3];\n\nconst newTheme = {\n  ...theme,\n  breakpoints\n};\n\n\nfunction Index() {\n  return(\n    <ChakraProvider theme = {newTheme}>\n      <CSSReset></CSSReset>\n      <App />\n    </ChakraProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Index/>, rootElement);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}